@using Microsoft.AspNetCore.Authorization
@using TaskStatus = ProjectManager.Domain.Entities.TaskStatus;
@using ProjectManager.Components.Common

@rendermode InteractiveServer
@attribute [Authorize]
@page "/projects/{ProjectId:guid}"

@inject NavigationManager NavigationManager

<button class="btn btn-primary mt-2" @onclick="@(() => NavigationManager.NavigateTo("/projects/"))">Back to Projects list</button>
<hr class="my-3" />

<h2 class="mb-3">@_project?.Name</h2>

@if (_loading)
{
    <p>Loading…</p>
}
else if (_project is null)
{
    <p class="text-danger">Project not found or access denied.</p>
}
else
{
    <p class="text-muted">@_project.Description</p>

    <div class="mt-4">
        <h4>Tasks</h4>

        <EditForm Model="_newTask" OnValidSubmit="CreateTaskAsync">
            <DataAnnotationsValidator />
            <div class="row g-2 align-items-start">
                <div class="col-12 col-md-4">
                    <InputText @bind-Value="_newTask.Title" class="form-control" placeholder="Task name" @oninput="TaskTitleChanged"/>
                    <ValidationMessage For="@(() => _newTask.Title)" />
                </div>
                <div class="col-12 col-md-5">
                    <InputTextArea @bind-Value="_newTask.DescriptionMarkdown" class="form-control" placeholder="Short description (Markdown is optional)" />
                </div>
                <div class="col-12 col-md-2">
                    <InputSelect @bind-Value="_newTask.Status" class="form-select">
                        @foreach (var s in Enum.GetValues<TaskStatus>())
                        {
                            <option value="@s">@s</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-12 col-md-1 d-grid">
                    <button class="btn btn-primary" type="submit" disabled="@(_creating || _createTaskButtonDisabled)">Create</button>
                </div>
            </div>
            @if (!string.IsNullOrWhiteSpace(_taskError)) { <div class="text-danger mt-2">@_taskError</div> }
        </EditForm>

        <hr class="my-3" />

        @if (_tasks.Count == 0)
        {
            <p class="text-muted">There are no tasks yet.</p>
        }
        else
        {
            <TaskKanban ProjectId="ProjectId" @ref="_kanban"/>
        }
    </div>

    @if (_isOwner)
    {
        <div class="mt-5">
            <h4>Members</h4>
            <div class="mb-2">
                <input class="form-control" placeholder="User's email to invite" @oninput="@(InviteEmailChanged)"/>
                <button class="btn btn-primary mt-2" @onclick="Invite" disabled="@_inviteButtonDisabled">Invite</button>
                @if (!string.IsNullOrWhiteSpace(_inviteError)) { <div class="text-danger mt-2">@_inviteError</div> }
                @if (!string.IsNullOrWhiteSpace(_inviteOk)) { <div class="text-success mt-2">@_inviteOk</div> }
            </div>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between">
                    <span><strong>Owner:</strong> @_ownerEmail</span>
                </li>
                @foreach (var m in _members)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@m.User.Email (@m.Role)</span>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveMember(m.Id)">Delete</button>
                    </li>
                }
            </ul>
        </div>
    }
}

@code {
    
}
