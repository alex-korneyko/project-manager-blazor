@using Microsoft.AspNetCore.Authorization
@using TaskStatus = ProjectManager.Domain.Entities.TaskStatus;

@rendermode InteractiveServer
@attribute [Authorize]
@page "/projects/{ProjectId:guid}"

@inject NavigationManager NavigationManager

<button class="btn btn-primary mt-2" @onclick="@(() => NavigationManager.NavigateTo($"/projects/"))">Back to Projects list</button>
<hr class="my-3" />

<h2 class="mb-3">@_project?.Name</h2>

@if (_loading)
{
    <p>Loading…</p>
}
else if (_project is null)
{
    <p class="text-danger">Project not found or access denied.</p>
}
else
{
    <p class="text-muted">@_project.Description</p>

    <div class="mt-4">
        <h4>Tasks</h4>

        <EditForm Model="_newTask" OnValidSubmit="CreateTaskAsync">
            <DataAnnotationsValidator />
            <div class="row g-2 align-items-start">
                <div class="col-12 col-md-4">
                    <InputText @bind-Value="_newTask.Title" class="form-control" placeholder="Task name" @oninput="TaskTitleChanged"/>
                    <ValidationMessage For="@(() => _newTask.Title)" />
                </div>
                <div class="col-12 col-md-5">
                    <InputTextArea @bind-Value="_newTask.DescriptionMarkdown" class="form-control" placeholder="Short description (Markdown is optional)" />
                </div>
                <div class="col-12 col-md-2">
                    <InputSelect @bind-Value="_newTask.Status" class="form-select">
                        @foreach (var s in Enum.GetValues<TaskStatus>())
                        {
                            <option value="@s">@s</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-12 col-md-1 d-grid">
                    <button class="btn btn-primary" type="submit" disabled="@(_creating || _createTaskButtonDisabled)">Create</button>
                </div>
            </div>
            @if (!string.IsNullOrWhiteSpace(_taskError)) { <div class="text-danger mt-2">@_taskError</div> }
        </EditForm>

        <hr class="my-3" />

        @if (_tasks.Count == 0)
        {
            <p class="text-muted">There are no tasks yet.</p>
        }
        else
        {
            <div class="list-group">
                @foreach (var t in _tasks.OrderByDescending(x => x.CreatedAtUtc))
                {
                    var canModify = _isOwner || t.AuthorId == _currentUserId;
                    <div class="list-group-item">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="me-3 flex-grow-1">
                                @if (_editId == t.Id)
                                {
                                    <EditForm Model="_editTask" OnValidSubmit="() => UpdateTaskAsync(t)">
                                        <DataAnnotationsValidator />
                                        <InputText @bind-Value="_editTask.Title" class="form-control mb-2" />
                                        <ValidationMessage For="@(() => _editTask.Title)" />
                                        <InputTextArea @bind-Value="_editTask.DescriptionMarkdown" class="form-control mb-2" rows="3" />
                                        <div class="d-flex gap-2">
                                            <button class="btn btn-success btn-sm" type="submit">Save</button>
                                            <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="CancelEdit">Cancel</button>
                                        </div>
                                    </EditForm>
                                }
                                else
                                {
                                    <div class="fw-semibold">@t.Title</div>
                                    @if (!string.IsNullOrWhiteSpace(t.DescriptionMarkdown))
                                    {
                                        <div class="text-muted small">@t.DescriptionMarkdown</div>
                                    }
                                    <div class="text-muted small">Author: @(_usersById.TryGetValue(t.AuthorId, out var a) ? a : t.AuthorId), @t.CreatedAtUtc.ToLocalTime()</div>
                                }
                            </div>

                            <div class="d-flex flex-column align-items-end" style="min-width:220px">
                                <!-- Статус: менять может любой участник -->
                                <div class="mb-2">
                                    <select class="form-select form-select-sm" value="@t.Status"
                                            @onchange="async e => await ChangeStatusAsync(t, Enum.Parse<TaskStatus>(e.Value?.ToString() ?? nameof(TaskStatus.Backlog)))">
                                        @foreach (var s in Enum.GetValues<TaskStatus>())
                                        {
                                            <option value="@s" selected="@(s == t.Status)">@s</option>
                                        }
                                    </select>
                                </div>

                                @if (canModify)
                                {
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-secondary" @onclick="() => BeginEdit(t)">Edit</button>
                                        <button class="btn btn-outline-danger" @onclick="() => DeleteTaskAsync(t)">Delete</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    @if (_isOwner)
    {
        <div class="mt-5">
            <h4>Members</h4>
            <div class="mb-2">
                <input class="form-control" placeholder="Email пользователя для приглашения" @oninput="@(InviteEmailChanged)"/>
                <button class="btn btn-primary mt-2" @onclick="Invite" disabled="@_inviteButtonDisabled">Invite</button>
                @if (!string.IsNullOrWhiteSpace(_inviteError)) { <div class="text-danger mt-2">@_inviteError</div> }
                @if (!string.IsNullOrWhiteSpace(_inviteOk)) { <div class="text-success mt-2">@_inviteOk</div> }
            </div>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between">
                    <span><strong>Owner:</strong> @_ownerEmail</span>
                </li>
                @foreach (var m in _members)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@m.User.Email (@m.Role)</span>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveMember(m.Id)">Delete</button>
                    </li>
                }
            </ul>
        </div>
    }
}

@code {
    
}
