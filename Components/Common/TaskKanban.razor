@using ProjectManager.Components.Modals

<div class="kanban">
    @foreach (var col in _columnsOrder)
    {
        <div class="kanban-col @(_hover[col] ? "drop-target" : null)"
             @ondragenter="@(() => OnDragEnter(col))"
             @ondragleave="@(() => OnDragLeave(col))"
             @ondragover="@(() => { })"
             @ondragover:preventDefault="true"
             @ondragenter:preventDefault="true"
             @ondrop="@(() => OnDrop(col))"
             @ondrop:preventDefault="true">
            <div class="kanban-col-header">
                <span class="badge bg-secondary">@col</span>
                <span class="count">@(_columns[col].Count)</span>
            </div>

            @if (_columns[col].Count == 0)
            {
                <div class="kanban-empty">Move task here</div>
            }

            @foreach (var t in _columns[col])
            {
                var busy = _busyTasks.Contains(t.Id);

                <TaskKanbanCard
                    @key="t.Id"
                    Task="t"
                    Class="@(busy ? "busy" : null)"
                    draggable="true"
                    @ondragstart="@(() => OnDragStart(t.Id))"
                    @onclick="@(() => _editTaskModal.OpenModalAsync(t.Id))"/>
            }

            <div class="kanban-col-footer">
                <button type="button" class="btn btn-light btn-sm add-btn"
                        title="Create task"
                        @onclick="async () => await _newTaskModal.OpenModalAsync(col)">
                    <span class="plus">+</span>
                </button>
            </div>
        </div>
    }
</div>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <div class="alert alert-danger mt-3">@_error</div>
}

<NewTaskModal
    @ref="_newTaskModal"
    Project="_currentProject"
    OnModalActionSucceeded="OnTaskCreated"
/>

<EditTaskModal @ref="_editTaskModal" OnModalActionSucceeded="OnTaskSaved"/>

@code {
    
}
